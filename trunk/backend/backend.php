<?php

include_once '/home2/mvldorg/public_html/fb/db_manager/dbmanager.php';

/*
 * Backend class handles the data processing of the system. It facilitates the generation of the
 * friends reccomendation list based on facebook api and local database data.
 * The GUI components will then display this data to the user.
 */
class Backend  {
	
	/*
	 * The instance of DBManager in the Backend.
	 */
	var $dbManager;
	
	/*
	 * Constructs a new Backend object and  initializes the database manager so that the 
	 * local database connection is open.
	 */
	function Backend() {
		$this->dbManager = new DBManager();
	}
	
	/*
	 * Returns a list of friend reccomendations as an associative array of form:
	 * key = friendId (a number generated by facebook)
	 * value = total number of times friendId appears in all friend's friend lists.
	 * The list is in sorted order where friendIds that appear most are on top.
	 *
	 * @param $uid - the id of the user to get friend reccomendations for.
	 * @param $fList - the list of friendIds that user is friends with.
	 * @return mapping of friendIds to ints as described above; null if an error occurs. 
	 */
	function getFriendRec($uid, $fList) {
		if($fList==NULL) {
			return NULL;
		}
		foreach($fList as $friend) {
			$ffList = $this->dbManager->getFriendsList($friend);
			foreach($ffList as $ffriend) {
				if(!$this->contains($ffriend, $fList) && $ffriend!=$uid)
					$fIdToCount['f'.$ffriend]++;
			}
		}
		
		arsort($fIdToCount);
		return $fIdToCount;
	}
	
	/*
	 * Utility function that returns true if an element is contained within a given list.
	 *
	 * @param $search - the element to search for
	 * @param $list - the list to search within
	 * @return true if $list contains an instance of $search; false otherwise.
	 */
	function contains($search, $list) {
		if($list==NULL)
			return false;
		foreach($list as $elem) {
			if($elem==$search)
				return true;
		}
		return false; //not found
	}
}

?>