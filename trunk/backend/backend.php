<?php

include_once '/home2/mvldorg/public_html/fb/db_manager/dbmanager.php';
include_once '/home2/mvldorg/public_html/fb/facebook_apis/FBInterface.php';

/*
 * Backend class handles the data processing of the system. It facilitates the generation of the
 * friends reccomendation list based on facebook api and local database data.
 * The GUI components will then display this data to the user.
 */
class Backend  {
	
	/*
	 * The instance of DBManager in the Backend.
	 */
	var $dbManager;
	
	/*
	 * The instance of the FBInterface in the Backend.
	 */
	var $fbInterface;
	
	/*
	 * Constructs a new Backend object and  initializes the manager components so that the 
	 * local database connection and facebook interfaces are open.
	 */
	function Backend() {
		$this->dbManager = new DBManager();
		$this->fbInterface = new FBInterface();
	}
	
	/*
	 * Function to be called when application is added by user. Function stores user's friends list in db.
	 */
	function appAdded() {
		$fids = $this->fbInterface->getFIDsList();
		$this->storeFriendsList($this->fbInterface->user, $fids);
	}
	
	/*
	 * Function to be called when user asks for friends reccomendations to be generated. Returns
	 * an associative array that has key = friendName and value = total number of times friend name appears in all of friend's 
	 * friend lists. Simply passes the call to getFriendRecHelper.
	 */
	function getFriendRec() {
		$uid = $this->fbInterface->user;
		$fids = $this->fbInterface->getFIDsList();
		return $this->getFriendRecHelper($uid, $fids, 450);
	}	
			
	/*
	 * Returns a list of friend reccomendations as an associative array of form:
	 * key = friendName (a number generated by facebook)
	 * value = total number of times friendName appears in all friend's friend lists.
	 * The list is in sorted order where friendIds that appear most are on top.
	 *
	 * @param $uid - the id of the user to get friend reccomendations for.
	 * @param $fList - the list of friendIds that user is friends with.
	 * @return mapping of friend names to ints as described above; null if an error occurs. 
	 */
	function getFriendRecHelper($uid, $fList, $max_num) {
		if($fList==NULL || sizeof($fList) <= 0) {
			return NULL;
		}
		
		//Generate fid to count mapping in sored array	
		foreach($fList as $friend) {
			$ffList = $this->dbManager->getFriendsList($friend);
			foreach($ffList as $ffriend) {
				if(!$this->contains($ffriend, $fList) && $ffriend!=$uid)
					$fIdToCount[''.$ffriend]++;
			}
		}
		if(sizeof($fIdToCount) <= 0) {
			return NULL;
		}
		else {
			arsort($fIdToCount);
		}
		
		//get names in list
		$x=0;
		foreach($fIdToCount as $fid => $count) {
			$topFidList[$x] = $fid;
			$x = $x + 1;
		}		
		$names = $this->fbInterface->getFriendNames($topFidList,450);
		
		//map names to count
		$x=0;
		foreach($fIdToCount as  $fid => $count) {
			$fNameToCount[''.$names[$x]] = $count;
			$x = $x + 1;
		}
	
		return $fNameToCount;
	}
		
	/*
	 * Function stores frields list in the database table. Returns true if friends list storage was successful.
	 *
	 * @param $uid - the user id of the person 
	 */
	function storeFriendsList($uid, $fList)  {
		if($fList==NULL) {
			return false;
		}
		return $this->dbManager->addEntry($uid, $fList);
	}
		
	/*
	 * Utility function that returns true if an element is contained within a given list.
	 *
	 * @param $search - the element to search for
	 * @param $list - the list to search within
	 * @return true if $list contains an instance of $search; false otherwise.
	 */
	function contains($search, $list) {
		if($list==NULL)
			return false;
		foreach($list as $elem) {
			if($elem==$search)
				return true;
		}
		return false; //not found
	}
}

?>